#=========================Imports=====================
import tkinter as tk                
from tkinter import font as tkfont  
from tkinter import *
from tkinter import ttk
from random import *
from tkinter import messagebox
import os
import re
import time
#====================Main Class===========================
class Main(tk.Tk):

    def __init__(self, *args, **kwargs): #Initialising attributes of class
        tk.Tk.__init__(self, *args, **kwargs)

        self.title_font = tkfont.Font(family='Helvetica', size=18, weight="bold", slant="italic") #Font

        manager = tk.Frame(self) #Stacking all the classes/windows/frames. 
        manager.pack(side="top", fill="both", expand=True) 
        manager.grid_rowconfigure(0, weight=1) #The weight will increase for the window/frame when it is showing so that it overlaps over the other frames/windows.
        manager.grid_columnconfigure(0, weight=1) #Or in simpler terms, the window that is showing will be raised. 

        self.windows = {} #List for all the windows
        self.windows["home_page2"] = home_page2(manager=self, parent=manager) #Creates home_page window
        self.windows["register_page"] = register_page(manager=self, parent=manager) #Creates register_page window
        self.windows["login_page"] = login_page( manager=self, parent=manager) #Creates login_page window
        self.windows["delivery_or_pickup"] = delivery_or_pickup( manager=self, parent=manager) #Creates delivery_or_pickup window
        self.windows["home_page"] = home_page( manager=self, parent=manager) #Creates gym_store window
        self.windows["barbells_page"] = barbells_page( manager=self, parent=manager, ) #Creates gym_store window
        self.windows["dumbbells_page"] = dumbbells_page( manager=self, parent=manager) #Creates gym_store window
        self.windows["machines_page"] = machines_page( manager=self, parent=manager) #Creates gym_store window
        self.windows["plates_page"] = plates_page( manager=self, parent=manager) #Creates gym_store window
        self.windows["ordering_page"] = ordering_page( manager=self, parent=manager) #Creates gym_store window

        self.windows["home_page2"].grid(row=0, column=0, sticky="nsew") #Geometry manager organising widgets for home_page
        self.windows["register_page"].grid(row=0, column=0, sticky="nsew")#Geometry manager organising widgets for register_page
        self.windows["login_page"].grid(row=0, column=0, sticky="nsew")#Geometry manager organising widgets for login_page
        self.windows["delivery_or_pickup"].grid(row=0, column=0, sticky="nsew")#Geometry manager organising widgets for delivery_or_pickup
        self.windows["home_page"].grid(row=0, column=0, sticky="nsew")#Geometry manager organising widgets for gym_store 
        self.windows["barbells_page"].grid(row=0, column=0, sticky="nsew")#Geometry manager organising widgets for gym_store 
        self.windows["dumbbells_page"].grid(row=0, column=0, sticky="nsew")#Geometry manager organising widgets for gym_store 
        self.windows["machines_page"].grid(row=0, column=0, sticky="nsew")#Geometry manager organising widgets for gym_store 
        self.windows["plates_page"].grid(row=0, column=0, sticky="nsew")#Geometry manager organising widgets for gym_store 
        self.windows["ordering_page"].grid(row=0, column=0, sticky="nsew")#Geometry manager organising widgets for gym_store 


        self.show_window("home_page2") #Show home page window
    def show_window(self, page_name): #Show_window method 
        window = self.windows[page_name] 
        window.tkraise() #Raises the window to make the desired window to be on top of all the others(shows window).

#====================================Home page class/window===========================
class home_page2(tk.Frame):

    def __init__(self, parent, manager): #Initialising attributes of class
        tk.Frame.__init__(self, parent) #Initialising the attributes of the frame.
        self.manager = manager #Retrieving the container variable from Main class
        self.banner() #Calling the banner function

        self.AgeVar = IntVar() #Declaring AgeVar as an integer
        self.frontLabel1 = tk.Label(self, text = "This app is designed to serve a purpose where").place(x=65, y = 110) #Label 1 for description 
        self.frontLabel2 = tk.Label(self, text = " the user can order gym equipment such as dumbbells, ").place(x=50, y=130) #Label 2 for description 
        self.frontLabel3 = tk.Label(self, text = "barbells, and so on. In order to use this app, you ").place(x=60, y=150)#Label 3 for description 
        self.frontLabel4 = tk.Label(self, text = "must log in or register and be between 16 to 90 ").place(x=65, y=170)#Label 4 for description 
        self.frontLabel5 = tk.Label(self, text = "years old when using this app. Please continue ").place(x=65, y=190)#Label 5 for description 
        self.frontLabel6 = tk.Label(self, text = "by entering an age below. ").place(x=75, y=210) #Label 6 for description 
        self.age_entry = tk.Entry(self, textvariable = self.AgeVar).place(x=120, y=230) #Age Entry
        self.register_button = tk.Button(self, text = "Register", command = self.check_age).place(x=120, y=250) #Register button
        self.login_button = tk.Button(self, text = "Login", command = lambda:manager.show_window("login_page")).place(x=200, y=250) #Login button

    def check_age(self): #Function to check the age of the user
        try:
            age = int(self.AgeVar.get()) 
            if 15<self.AgeVar.get()<91: 
                print("Yes")
                self.manager.show_window("register_page") #If user input is between 16 and 90, call the method show_frame to show register_page with regards to manager
                return
            else:
                response1 = messagebox.showerror("Access Denied", "You do not meet the age requirements") #If user input is not within 16 and 90, send messagebox
                print("NO")
        except:
            response3 = messagebox.showinfo("Access Denied", "Please enter a valid age") #If user input is not an integer or is invalid, send messagebox.
            return

    def banner(self): #Banner method
        self.TitleImage = PhotoImage(file="images/workout.png") 
        self.title_label = tk.Label(self, image=self.TitleImage).grid(row=0, column=0)
    def exit(self):
        exityesorno = messagebox.askquestion("Quit", "Are you sure you would like to exit the program?")
        if exityesorno == "yes":
            app.destroy()
        else:
            return
#============================================================Register class/window===================
class register_page(tk.Frame): #Register page class/window

    def __init__(self, parent, manager): #Initiliazing attributes 
        tk.Frame.__init__(self, parent) #Initiliazing frame attributes
        self.manager = manager
        home_page2.banner(self) #Calling banner method from home page class

        self.name_label = tk.Label(self, text = "Name: ") #Label for name
        self.name_label.place(x=100,y=125)
        self.name_entry = tk.Entry(self) #Entry for name
        self.name_entry.place(x=160,y=125)

        self.gmail_label = tk.Label(self, text = "Gmail: ") #Label for gmail
        self.gmail_label.place(x=100,y=155)
        self.gmail_entry = tk.Entry(self) #Entry for gmail
        self.gmail_entry.place(x=160,y=155)

        self.password_label = tk.Label(self, text = "Password: ") #Label for password
        self.password_label.place(x=100,y=185)
        self.password_entry = tk.Entry(self, show = "*") #Entry for password
        self.password_entry.place(x=160,y=185)
   
        self.login_button = tk.Button(self, text = "Login", command = self.register_check).place(x=160, y=215) #Login button

        self.back_to_home_button1 = tk.Button(self, text = "Home", command = lambda: manager.show_window("home_page2"))#Back to startpage button
        self.back_to_home_button1.place(x=240,y=215) 
       
    
    def register_check(self): #Checks if the entries for register is valid (Register_check method)
        name_info = self.name_entry.get().strip().isalpha() #Assigns name_info to the values of name while also removing any spaces, and makes sure their input is a string.
        gmail_info = self.gmail_entry.get() #Assigns gmail_info to the values of gmail
        password_info = self.password_entry.get() #Assigns password_info to the values of password.
        check_symbols = '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$' #Assigns check_symbols to '^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w{2,3}$' so we can use it to check if the gmail is valid.
        if gmail_info == "" or password_info == "" or name_info =="": 
            no_input_error = messagebox.showerror("Access Denied", "Please fill out all the entries") #If all entries are blank, send message
            return
        if (re.search(check_symbols,gmail_info)): #Checks the gmail through 'check_symbols' to see if the user's input has any symbols from the list.
            print("Email input is valid")
            if (len(password_info)<8):
                invalid_password =messagebox.showerror("Invalid password","Please enter a password that is longer than 8") #If password is less than 8, sends message
                return
            if name_info == False:
                 invalid_name = messagebox.showerror("Name Invalid","Please enter a valid name") #If name is a integer, send message 
            if name_info == TRUE:
                if gmail_info == "" or password_info == "" or name_info =="": #Checks if the entries are blank once more for errors and if it's blank, send message
                    no_input_error = messagebox.showerror("Access Denied", "Please fill out all the entries")
                else:
                    self.register_user() #If all the entries are valid, call the register_user method.   
        else:
            invalid_gmail = messagebox.showerror("Invalid gmail","Please enter a valid gmail") #If gmail is invalid, send message
            return  
    def register_user(self): #(Register user method)
        file = open(self.gmail_entry.get(), "w") #Creates file with the name being the user's gmail
        file.write(self.gmail_entry.get() + "\n") #Writes the user's gmail and creates a new line
        file.write(self.password_entry.get()) #Writes the user's password
        file.close() #Closes file
        self.password_entry.delete(0, END) #Deletes entry values from user for password
        self.gmail_entry.delete(0, END) #Deletes entry values from user for gmail
        self.name_entry.delete(0, END) #Deletes entry values from user for name
        self.manager.show_window("login_page") #Calls show_frame method with regards to manager and shows login_page window
        

class login_page(tk.Frame): #Login class/window

    def __init__(self, parent, manager): #Initiliazing attributes
        tk.Frame.__init__(self, parent) #Initializing the frame of login_page
        self.manager = manager #Declares self.manageras manager(argument).
        home_page2.banner(self) #Banner
        
        self.login_gmail_label = tk.Label(self, text = "Gmail: ") #Label for gmail login
        self.login_gmail_label.place(x=100,y=125)
        self.login_gmail_entry = tk.Entry(self) #Entry for gmail login
        self.login_gmail_entry.place(x=160,y=125)

        self.login_password_label = tk.Label(self, text = "Password: ") #Label for password login
        self.login_password_label.place(x=100,y=155)
        self.login_password_entry = tk.Entry(self, show = "*") #Entry for password login
        self.login_password_entry.place(x=160,y=155)

        self.loginpage_button = tk.Button(self, text = "Login", command = self.login_verify) #Login buttn
        self.loginpage_button.place(x=160,y=195)
        self.back_to_home_button = tk.Button(self, text = "Home", command = lambda: manager.show_window("home_page2"))#Back to startpage button
        self.back_to_home_button.place(x=240,y=195) 

    def login_verify(self):
        self.verify_gmail = self.login_gmail_entry.get()  #Declares that verify_gmail is the user's entry for gmail
        self.verify_password = self.login_password_entry.get() #Declares that verifify_password is the user's entry for password
        list_of_files = os.listdir() #Declares that list_of_files is os.listrdir() which gets all the files in the specified directory.
        if self.verify_gmail in list_of_files: 
            file1 = open(self.verify_gmail, "r")
            verify = file1.read().splitlines()
            if self.verify_password in verify:
                print("SUCCESS")#If the account is in the list of files, and their input matches the password inside that text file, print("SUCCESS")
                self.manager.show_window("delivery_or_pickup")
            else:   
                password_not_valid = messagebox.showerror("Access Denied", "Please enter a valid password") #If it's not, then send message
        else:
            no_account = messagebox.showerror("Access Denied", "Please enter valid details") #If there is no account/no input, send message
    
class delivery_or_pickup(tk.Frame): #delivery_or_pickup class
    def __init__(self, parent, manager): #Initializes attributes
        tk.Frame.__init__(self, parent) #Initializes frame 
        self.manager = manager #Declares self.manager as manager (for window controlling)
        home_page2.banner(self) #Banner
        self.delivery_button = tk.Button(self, text = "Delivery", height = 5, width = 10, command = self.delivery) #Delivery button
        self.delivery_button.place(x=110, y= 170)
        self.pickup_button = tk.Button(self, text = "Pickup", height = 5, width = 10, command = self.pickup) #Pickup button
        self.pickup_button.place(x=200, y=170)
        self.delete_button = tk.Button(self, text = "Delete", fg= 'red', command = self.delete_account) #Delete account button
        self.delete_button.place(x=15,y=360)
    def delete_account(self): #Delete account method
        delete_user_ask = messagebox.askquestion("Delete User","Are you sure you would like to delete your account?")
        if delete_user_ask == 'yes':
            os.remove((app.windows["login_page"]).login_gmail_entry.get())
            print("DONE DELETING")
            self.manager.show_window("register_page")
        else:
            return
    def delivery(self):
        self.manager.show_window("home_page")
    
    def pickup(self):
        self.manager.show_window("home_page")
class home_page(tk.Frame):  
    def __init__(self, parent, manager): #Initializes attributes
        tk.Frame.__init__(self, parent) #Initializes frame 
        self.manager = manager #Declares self.manager as manager (for window controlling)
        home_top_border = Frame(self, width = 1366, height = 60, bd = 14, relief ="raise", background = "light blue") #Top border for the banner
        home_top_border.pack(side=TOP)
        self.TitleImage = PhotoImage(file="images/GymHomeBanner.png")  #Banner for the home page
        self.title_label = tk.Label(self, image=self.TitleImage, bd=3).pack(side=TOP)

        home_bottom_border = Frame(self, width = 1366, height = 60, bd = 14, relief ="raise", background = "light blue")
        home_bottom_border.pack(side=TOP) #Bottom border for the banner

        FrameOne = tk.Frame(self, width = 440, height = 650, bd = 8, relief = "raise", background = "light blue")
        FrameOne.pack(side=LEFT) #First frame for the design
        self.FrameTwo = tk.Frame(self, width = 900, height = 350, bd = 8, relief ="raise", background = "light blue")
        self.FrameTwo.pack(side=RIGHT) #Second frame for the design
        FrameTwoFront = tk.Label(self.FrameTwo, width = 60, height = 540, bd = 8,text = "Welcome to our gym store, to use this \nprogram, click on the desired windows shown\n to the left and tick the items you would like to buy.\n Once you have ticked the items, please enter\n the number of items you would like to buy\n and then proceed to the finish ordering window \nwhere you can find your receipt and the total price. \nIf you have chosen the delivery option, please enter\n your delivery address." ,relief = "raise", background = "light blue",font=('Helvactical bold', 20))
        FrameTwoFront.pack(side=RIGHT)  #Frame ontop of second frame.
       
        home_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Home", command = lambda:manager.show_window("home_page"))
        home_button.pack(side=TOP) #Home button
        barbells_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Barbells", command = lambda:manager.show_window("barbells_page")) 
        barbells_button.pack(side=TOP) #Barbells button
        dumbbells_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Dumbbells", command = lambda:manager.show_window("dumbbells_page")) 
        dumbbells_button.pack(side=TOP) #Dumbbells button
        machines_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Machines", command = lambda:manager.show_window("machines_page")) 
        machines_button.pack(side=TOP) #Machines button
        plates_button = tk.Button(FrameOne, width = 47, height =3, bd = 12, relief = "raise", background = "light blue", text = "Plates", command = lambda:manager.show_window("plates_page")) 
        plates_button.pack(side=TOP) #Plates button
        ordering_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Finish Ordering", command = lambda:manager.show_window("ordering_page")) 
        ordering_button.pack(side=TOP) #Ordering button.
        exit_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Exit") 
        exit_button.pack(side=TOP)#Exit button
#=======================================================Barbells page====================================
class barbells_page(tk.Frame):  
    def __init__(self, parent, manager): #Initializes attributes
        tk.Frame.__init__(self, parent) #Initializes frame 
        self.manager = manager #Declares self.manager as manager (for window controlling)
        barbells_top_border = Frame(self, width = 1366, height = 60, bd = 14, relief ="raise", background = "light blue")
        barbells_top_border.place(x=0,y=0) #Barbells top border
        self.TitleImage = PhotoImage(file="images/GymHomeBanner.png") 
        self.title_label = tk.Label(self, image=self.TitleImage, bd=3).place(x=0, y=56) #Banner for barbells
        barbells_bottom_border = Frame(self, width = 1366, height = 60, bd = 14, relief ="raise", background = "light blue")
        barbells_bottom_border.place(x=0, y=156) #Barbells bottom border 
    
        self.TitleImage2 = PhotoImage(file="images/barbellbanner.png") #Barbells banner
        self.title_label2 = tk.Label(self, image=self.TitleImage2, bd=3).place(x=365, y=215)
        FrameOne = tk.Frame(self, width = 500, height = 650, bd = 8, relief = "raise", background = "light blue")
        FrameOne.place(x=0, y=215) #First  frame
        self.FrameTwo = tk.Frame(self, width = 500, height = 365, bd = 8, relief ="raise", background = "light blue")
        self.FrameTwo.place(x=374, y=420) #Second frame
        self.FrameThree = tk.Frame(self, width = 500, height = 365, bd = 8, relief ="raise", background = "light blue")
        self.FrameThree.place(x=930, y=420) #Third frame
        FrameFour = tk.Frame(self, width = 180, height = 359, bd = 8, relief ="raise", background = "light blue")
        FrameFour.place(x=750, y=420) #Fourth frame

       
        home_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Home", command = lambda:manager.show_window("home_page"))
        home_button.pack(side=TOP) #Home button
        barbells_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Barbells", command = lambda:manager.show_window("barbells_page")) 
        barbells_button.pack(side=TOP) #Barbells button
        dumbbells_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Dumbbells", command = lambda:manager.show_window("dumbbells_page")) 
        dumbbells_button.pack(side=TOP)#Dumbells button
        machines_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Machines", command = lambda:manager.show_window("machines_page")) 
        machines_button.pack(side=TOP)#Machines button
        plates_button = tk.Button(FrameOne, width = 47, height =3, bd = 12, relief = "raise", background = "light blue", text = "Plates", command = lambda:manager.show_window("plates_page")) 
        plates_button.pack(side=TOP)#Plates button
        ordering_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Finish Ordering", command = lambda:manager.show_window("ordering_page")) 
        ordering_button.pack(side=TOP)#Ordering button
        exit_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Exit") 
        exit_button.pack(side=TOP)#Exit button
        #===============================================================Variables===================================
        self.ItemVar1 = IntVar()
        self.ItemVar2 = IntVar()
        self.ItemVar3 = IntVar()
        self.ItemVar4 = IntVar()
        self.ItemVar5 = IntVar()
        self.ItemVar6 = IntVar()
        self.ItemVar7 = IntVar()
        self.ItemVar8 = IntVar()
        self.ItemVar9 = IntVar()
        self.ItemVar10 = IntVar()
        self.ItemVar11 = IntVar()
        self.ItemVar12 = IntVar()
        self.ItemVar13 = IntVar()
        self.ItemVar14 = IntVar()
        self.ItemVar15 = IntVar()
        self.ItemVar16 = IntVar()
     

        #barbell_items = [self.barbells["5"] ,self.barbells["10"] ,self.variable_fifteenkgs_barbell ,self.variable_twentykgs_barbell ,self.variable_twentyfivekgs_barbell ,self.variable_thirtykgs_barbell ,self.variable_thirtyfivekgs_barbell ,self.variable_fourtykgs_barbell ,self.variable_fourtyfivekgs_barbell ,self.variable_fiftykgs_barbell ,self.variable_fiftyfivekgs_barbell,self.variable_sixtykgs_barbell ,self.variable_sixtyfivekgs_barbell, self.variable_seventykgs_barbell, self.variable_seventyfivekgs_barbell, self.variable_eightykgs_barbell,self.variable_eightykgs_barbell, self.variable_seventyfivekgs_barbell]
        #for i in barbell_items:
         #
        self.barbells = {weight: StringVar() for weight in range(5, 85, 5)}
        #===================================================Widgets for barbell items===========================================
        #===================================================First section for barbell items=============================================
        FirstLabel = tk.Label(self.FrameTwo, font=('arial',15, 'bold'),text = "Barbells 5-40 kgs",bd=10, background = "light blue")
        FirstLabel.grid(row=0,column=0)
        fivekgs_barbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Barbell 5kgs ($15.00)\t" ,variable = self.ItemVar1,command = self.barbell_checked_checkbuttons, onvalue = 1, background = "light blue", offvalue = 0, font=('arial',15, 'bold')).grid(row=1, sticky =W)
        tenkgs_barbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Barbell 10kgs ($30.00) " , variable = self.ItemVar2,command = self.barbell_checked_checkbuttons, onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=2, sticky =W)
        fifteenkgs_barbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Barbell 15kgs ($45.00)" , variable = self.ItemVar3, command = self.barbell_checked_checkbuttons,onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=3, sticky =W)
        twentykgs_barbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Barbell 20kgs ($60.00) ", variable = self.ItemVar4, command = self.barbell_checked_checkbuttons,onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=4, sticky =W)
        twentyfivekgs_barbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Barbell 25kg ($75.00) ",variable = self.ItemVar5,command = self.barbell_checked_checkbuttons, onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=5, sticky =W)
        thirtykgs_barbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Barbell 30kgs ($90.00) ",variable = self.ItemVar6, command = self.barbell_checked_checkbuttons,onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=6, sticky =W)
        thirtyfivekgs_barbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Barbell 35kgs ($105.00) ", variable = self.ItemVar7,command = self.barbell_checked_checkbuttons, onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=7, sticky =W)
        fourtykgs_barbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Barbell 40kgs ($120.00) ", variable = self.ItemVar8, command = self.barbell_checked_checkbuttons,onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=8, sticky =W)
        self.barbells = {}
        for index, weight in enumerate(range(5, 45, 5)): # kinda ugly but w/e
            entry = tk.Entry(self.FrameTwo, bd = 8, width = 8, state = DISABLED)
            entry.grid(row=index+1, column=1)
            self.barbells[weight] = [entry, StringVar()]
            
            
        for index, weight in enumerate(range(45, 85, 5)): # kinda ugly but w/e
            self.entry = tk.Entry(self.FrameThree, bd = 8, width = 8, state = DISABLED)
            self.entry.grid(row=index+1, column=1)
            self.barbells[weight] = [self.entry, StringVar()]
            
        #=====================================================================Second section for barbell items================================
        SecondLabel = tk.Label(self.FrameThree, font=('arial',15, 'bold'),text = "Barbells 45-80 kgs",bd=10, background = "light blue")
        SecondLabel.grid(row=0,column=0)
        fourtyfivekgs_barbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Barbell 45kgs ($135.00) ", variable = self.ItemVar9, command = self.barbell_checked_checkbuttons,onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=1, sticky =W)
        fiftykgs_barbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Barbell 50kgs ($150.00) \t", variable = self.ItemVar10, command = self.barbell_checked_checkbuttons,onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=2, sticky =W)
        fiftyfivekgs_barbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Barbell 55kgs ($165.00) \t", variable = self.ItemVar11, command = self.barbell_checked_checkbuttons,onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=3, sticky =W)
        sixtykgs_barbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Barbell 60kgs ($180.00)\t", variable = self.ItemVar12,command = self.barbell_checked_checkbuttons,onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=4, sticky =W)
        sixtyfivekgs_barbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Barbell 65kgs ($195.00) \t", variable = self.ItemVar13,command = self.barbell_checked_checkbuttons, onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=5, sticky =W)
        seventyfivekgs_barbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Barbell 70kgs ($210.00) \t", variable = self.ItemVar14, command = self.barbell_checked_checkbuttons,onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=6, sticky =W)
        seventyfivekgs_barbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Barbell 75kgs ($225.00) \t", variable = self.ItemVar15,command = self.barbell_checked_checkbuttons, onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=7, sticky =W)
        eightykgs_barbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Barbell 80kgs ($240.00) \t",variable = self.ItemVar16, command = self.barbell_checked_checkbuttons,onvalue = 1, offvalue = 0, font=('arial',15, 'bold'), background = "light blue").grid(row=8, sticky =W)
        
    def barbell_checked_checkbuttons(self):
        if (self.ItemVar1.get()==1):
            self.entry.config(state = NORMAL)
        else:
            print('error')
        
#======================================================Dumbells page===================================
class dumbbells_page(tk.Frame):  
    def __init__(self, parent, manager): #Initializes attributes
        tk.Frame.__init__(self, parent) #Initializes frame 
        self.manager = manager #Declares self.manager as manager (for window controlling)
        dumbbells_top_border = Frame(self, width = 1366, height = 60, bd = 14, relief ="raise", background = "light blue")
        dumbbells_top_border.place(x=0,y=0) #dumbbells top border
        self.TitleImage = PhotoImage(file="images/GymHomeBanner.png") 
        self.title_label = tk.Label(self, image=self.TitleImage, bd=3).place(x=0, y=56) #Banner for dumbbells
        dumbbells_bottom_border = Frame(self, width = 1366, height = 60, bd = 14, relief ="raise", background = "light blue")
        dumbbells_bottom_border.place(x=0, y=156) #dumbbells bottom border 
       
        self.TitleImage2 = PhotoImage(file="images/dumbbellsbanner.png") #Dumbbells banner
        self.title_label2 = tk.Label(self, image=self.TitleImage2, bd=3).place(x=365, y=215)
        FrameOne = tk.Frame(self, width = 500, height = 650, bd = 8, relief = "raise", background = "light blue")
        FrameOne.place(x=0, y=215) #First  frame
        self.FrameTwo = tk.Frame(self, width = 500, height = 365, bd = 8, relief ="raise", background = "light blue")
        self.FrameTwo.place(x=374, y=403) #Second frame
        self.FrameThree = tk.Frame(self, width = 500, height = 365, bd = 8, relief ="raise", background = "light blue")
        self.FrameThree.place(x=960, y=403) #Third frame
        FrameFour = tk.Frame(self, width = 180, height = 359, bd = 8, relief ="raise", background = "light blue")
        FrameFour.place(x=780, y=403) #Fourth frame

       
        home_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Home", command = lambda:manager.show_window("home_page"))
        home_button.pack(side=TOP) #Home button
        barbells_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Barbells", command = lambda:manager.show_window("barbells_page")) 
        barbells_button.pack(side=TOP) #Barbells button
        dumbbells_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Dumbbells", command = lambda:manager.show_window("dumbbells_page")) 
        dumbbells_button.pack(side=TOP)#Dumbells button
        machines_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Machines", command = lambda:manager.show_window("machines_page")) 
        machines_button.pack(side=TOP)#Machines button
        plates_button = tk.Button(FrameOne, width = 47, height =3, bd = 12, relief = "raise", background = "light blue", text = "Plates", command = lambda:manager.show_window("plates_page")) 
        plates_button.pack(side=TOP)#Plates button
        ordering_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Finish Ordering", command = lambda:manager.show_window("ordering_page")) 
        ordering_button.pack(side=TOP)#Ordering button
        exit_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Exit") 
        exit_button.pack(side=TOP)#Exit button
        #===============================================================Variables===================================
        self.ItemVar17 = IntVar()
        self.ItemVar18 = IntVar()
        self.ItemVar19 = IntVar()
        self.ItemVar20 = IntVar()
        self.ItemVar21 = IntVar()
        self.ItemVar22 = IntVar()
        self.ItemVar23 = IntVar()
        self.ItemVar24 = IntVar()
        self.ItemVar25 = IntVar()
        self.ItemVar26 = IntVar()
        self.ItemVar27 = IntVar()
        self.ItemVar28 = IntVar()
        self.ItemVar29 = IntVar()
        self.ItemVar30 = IntVar()
        self.ItemVar31 = IntVar()
        self.ItemVar32 = IntVar()
        self.variable_fivekgs_dumbbell = StringVar()
        self.variable_tenkgs_dumbbell = StringVar()
        self.variable_fifteenkgs_dumbbell = StringVar()
        self.variable_twentykgs_dumbbell = StringVar()
        self.variable_twentyfivekgs_dumbbell = StringVar()
        self.variable_thirtykgs_dumbbell = StringVar()
        self.variable_thirtyfivekgs_dumbbell = StringVar()
        self.variable_fourtykgs_dumbbell = StringVar()
        self.variable_fourtyfivekgs_dumbbell = StringVar()
        self.variable_fiftykgs_dumbbell = StringVar()
        self.variable_fiftyfivekgs_dumbbell = StringVar()
        self.variable_sixtykgs_dumbbell = StringVar()
        self.variable_sixtyfivekgs_dumbbell = StringVar()
        self.variable_seventykgs_dumbbell = StringVar()
        self.variable_seventyfivekgs_dumbbell = StringVar()
        self.variable_eightykgs_dumbbell = StringVar()

        
        
        dumbbell_items = [self.variable_fivekgs_dumbbell ,self.variable_tenkgs_dumbbell ,self.variable_fifteenkgs_dumbbell ,self.variable_twentykgs_dumbbell ,self.variable_twentyfivekgs_dumbbell,self.variable_thirtykgs_dumbbell,self.variable_thirtyfivekgs_dumbbell,self.variable_fourtykgs_dumbbell,self.variable_fourtyfivekgs_dumbbell,self.variable_fiftykgs_dumbbell ,self.variable_fiftyfivekgs_dumbbell ,self.variable_sixtykgs_dumbbell,self.variable_sixtyfivekgs_dumbbell ,self.variable_seventykgs_dumbbell ,self.variable_seventyfivekgs_dumbbell,self.variable_eightykgs_dumbbell ]
        for i in dumbbell_items:
            i.set("0")
        #===================================================Widgets for dumbbell items===========================================
        #===================================================First section for dumbell items=============================================
        FirstLabel = tk.Label(self.FrameTwo, font=('arial',15, 'bold'),text = "Dumbbells 5-40 kgs",bd=10, background = "light blue")
        FirstLabel.grid(row=0,column=0)
        fivekgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Dumbbell 5kgs ($10.00)\t\t" ,command = self.dumbbell_checked_checkbuttons,variable = self.ItemVar17, onvalue = 1, background = "light blue", offvalue = 0, font=('arial',13, 'bold')).grid(row=1, sticky =W)
        tenkgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Dumbbell 10kgs ($20.00) " , command = self.dumbbell_checked_checkbuttons,variable = self.ItemVar18, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=2, sticky =W)
        fifteenkgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Dumbbell 15kgs ($30.00) " ,command = self.dumbbell_checked_checkbuttons, variable = self.ItemVar19, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=3, sticky =W)
        twentykgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Dumbbell 20kgs ($40.00) ",command = self.dumbbell_checked_checkbuttons, variable = self.ItemVar20, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=4, sticky =W)
        twentyfivekgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Dumbbell 25kgs ($50.00) ",command = self.dumbbell_checked_checkbuttons,variable = self.ItemVar21, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=5, sticky =W)
        thirtykgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Dumbbell 30kgs ($60.00) ",command = self.dumbbell_checked_checkbuttons,variable = self.ItemVar22, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=6, sticky =W)
        thirtyfivekgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Dumbbell 35kgs ($70.00) ", command = self.dumbbell_checked_checkbuttons,variable = self.ItemVar23, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=7, sticky =W)
        fourtykgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Dumbbell 40kgs ($80.00) ",command = self.dumbbell_checked_checkbuttons,variable = self.ItemVar24, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=8, sticky =W)
        self.fivekgs_dumbbell_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_fivekgs_dumbbell, state = DISABLED)
        self.fivekgs_dumbbell_entry.grid(row =1, column = 1)
        self.tenkgs_dumbbell_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_tenkgs_dumbbell, state = DISABLED)
        self.tenkgs_dumbbell_entry.grid(row =2, column = 1)
        self.fifteenkgs_dumbbell_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_fifteenkgs_dumbbell, state = DISABLED)
        self.fifteenkgs_dumbbell_entry.grid(row =3, column = 1)
        self.twentykgs_dumbbell_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_twentykgs_dumbbell, state = DISABLED)
        self.twentykgs_dumbbell_entry.grid(row =4, column = 1)
        self.twentyfivekgs_dumbbell_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_twentyfivekgs_dumbbell, state = DISABLED)
        self.twentyfivekgs_dumbbell_entry.grid(row =5, column = 1)
        self.thirtykgs_dumbbell_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_thirtykgs_dumbbell ,state = DISABLED)
        self.thirtykgs_dumbbell_entry.grid(row =6, column = 1)
        self.thirtyfivekgs_dumbbell_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_thirtyfivekgs_dumbbell, state = DISABLED)
        self.thirtyfivekgs_dumbbell_entry.grid(row =7, column = 1)
        self.fourtykgs_dumbbell_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left', textvariable = self.variable_fourtykgs_dumbbell, state = DISABLED)
        self.fourtykgs_dumbbell_entry.grid(row =8, column = 1)
        #=====================================================================Second section for dumbbell items================================
        SecondLabel = tk.Label(self.FrameThree, font=('arial',15, 'bold'),text = "Dumbbells 45-80 kgs",bd=10, background = "light blue")
        SecondLabel.grid(row=0,column=0)
        fourtyfivekgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Dumbbell 45kgs ($90.00)\t\t",command = self.dumbbell_checked_checkbuttons, variable = self.ItemVar25, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=1, sticky =W)
        fiftykgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Dumbbell 50kgs ($100.00)\t",command = self.dumbbell_checked_checkbuttons, variable = self.ItemVar26, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=2, sticky =W)
        fiftyfivekgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Dumbbell 55kgs ($110.00)\t",command = self.dumbbell_checked_checkbuttons, variable = self.ItemVar27, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=3, sticky =W)
        sixtykgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Dumbbell 60kgs ($120.00)\t",command = self.dumbbell_checked_checkbuttons, variable = self.ItemVar28, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=4, sticky =W)
        sixtyfivekgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Dumbbell 65kgs ($130.00) \t",command = self.dumbbell_checked_checkbuttons, variable = self.ItemVar29, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=5, sticky =W)
        seventyfivekgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Dumbbell 70kgs ($140.00) \t",command = self.dumbbell_checked_checkbuttons, variable = self.ItemVar30, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=6, sticky =W)
        seventyfivekgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Dumbbell 75kgs ($150.00) \t",command = self.dumbbell_checked_checkbuttons, variable = self.ItemVar31, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=7, sticky =W)
        eightykgs_dumbbell_checkbutton = tk.Checkbutton(self.FrameThree, text ="Dumbbell 80kgs ($160.00) \t",command = self.dumbbell_checked_checkbuttons,variable = self.ItemVar32, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=8, sticky =W)
        self.fourtyfivekgs_dumbbell_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_fourtyfivekgs_dumbbell, state = DISABLED)
        self.fourtyfivekgs_dumbbell_entry.grid(row =1, column = 1)
        self.fiftykgs_dumbbell_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_fiftykgs_dumbbell, state = DISABLED)
        self.fiftykgs_dumbbell_entry.grid(row =2, column = 1)
        self.fiftyfivekgs_dumbbell_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable =self.variable_fiftyfivekgs_dumbbell, state = DISABLED)
        self.fiftyfivekgs_dumbbell_entry.grid(row =3, column = 1)
        self.sixtykgs_dumbbell_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable =self.variable_sixtykgs_dumbbell, state = DISABLED)
        self.sixtykgs_dumbbell_entry.grid(row =4, column = 1)
        self.sixtyfivekgs_dumbbell_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_sixtyfivekgs_dumbbell, state = DISABLED)
        self.sixtyfivekgs_dumbbell_entry.grid(row =5, column = 1)
        self.seventykgs_dumbbell_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_sixtykgs_dumbbell, state = DISABLED)
        self.seventykgs_dumbbell_entry.grid(row =6, column = 1)
        self.seventyfivekgs_dumbbell_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_sixtyfivekgs_dumbbell, state = DISABLED)
        self.seventyfivekgs_dumbbell_entry.grid(row =7, column = 1)
        self.eightykgs_dumbbell_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6, textvariable = self.variable_seventykgs_dumbbell, state = DISABLED)
        self.eightykgs_dumbbell_entry.grid(row =8, column = 1)   
    def dumbbell_checked_checkbuttons(self):
        if (self.ItemVar17.get()==1):
            self.fivekgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar17.get()==0:
            self.fivekgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_fivekgs_dumbbell.set("0")
        if (self.ItemVar18.get()==1):
            self.tenkgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar18.get()==0:
            self.tenkgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_tenkgs_dumbbell.set("0")
        if (self.ItemVar19.get()==1):
            self.fifteenkgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar19.get()==0:
            self.fifteenkgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_fifteenkgs_dumbbell.set("0")
        if (self.ItemVar20.get()==1):
            self.twentykgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar20.get()==0:
            self.twentykgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_twentykgs_dumbbell.set("0")
        if (self.ItemVar21.get()==1):
            self.twentyfivekgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar21.get()==0:
            self.twentyfivekgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_twentyfivekgs_dumbbell.set("0")
        if (self.ItemVar22.get()==1):
            self.thirtykgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar22.get()==0:
            self.thirtykgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_thirtykgs_dumbbell.set("0")
        if (self.ItemVar23.get()==1):
            self.thirtyfivekgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar23.get()==0:
            self.thirtyfivekgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_thirtyfivekgs_dumbbell.set("0")
        if (self.ItemVar24.get()==1):
            self.fourtykgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar24.get()==0:
            self.fourtykgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_fourtykgs_dumbbell.set("0")
        if (self.ItemVar25.get()==1):
            self.fourtyfivekgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar25.get()==0:
            self.fourtyfivekgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_fourtyfivekgs_dumbbell.set("0")
        if (self.ItemVar26.get()==1):
            self.fiftykgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar26.get()==0:
            self.fiftykgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_fiftykgs_dumbbell.set("0")
        if (self.ItemVar27.get()==1):
            self.fiftyfivekgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar27.get()==0:
            self.fiftyfivekgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_fiftyfivekgs_dumbbell.set("0")
        if (self.ItemVar28.get()==1):
            self.sixtykgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar28.get()==0:
            self.sixtykgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_sixtykgs_dumbbell.set("0")
        if (self.ItemVar29.get()==1):
            self.sixtyfivekgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar29.get()==0:
            self.sixtyfivekgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_sixtyfivekgs_dumbbell.set("0")
        if (self.ItemVar30.get()==1):
            self.seventykgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar30.get()==0:
            self.seventykgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_seventykgs_dumbbell.set("0")
        if (self.ItemVar31.get()==1):
            self.seventyfivekgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar31.get()==0:
            self.seventyfivekgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_seventyfivekgs_dumbbell.set("0")
        if (self.ItemVar32.get()==1):
            self.eightykgs_dumbbell_entry.configure(state="normal")
        elif self.ItemVar32.get()==0:
            self.eightykgs_dumbbell_entry.configure(state=DISABLED)
            self.variable_eightykgs_dumbbell.set("0")
#======================================================Machines page=======================================
class machines_page(tk.Frame):  
    def __init__(self, parent, manager): #Initializes attributes
        tk.Frame.__init__(self, parent) #Initializes frame 
        self.manager = manager #Declares self.manager as manager (for window controlling)
        machines_top_border = Frame(self, width = 1366, height = 60, bd = 14, relief ="raise", background = "light blue")
        machines_top_border.place(x=0,y=0) #Machines top border
        self.TitleImage = PhotoImage(file="images/GymHomeBanner.png") 
        self.title_label = tk.Label(self, image=self.TitleImage, bd=3).place(x=0, y=56) #Banner for welcoming
        machines_bottom_border = Frame(self, width = 1366, height = 60, bd = 14, relief ="raise", background = "light blue")
        machines_bottom_border.place(x=0, y=156) #Machines bottom border
       
        self.TitleImage2 = PhotoImage(file="images/machinesbanner.png") #Machines banner
        self.title_label2 = tk.Label(self, image=self.TitleImage2, bd=3).place(x=365, y=215)
        FrameOne = tk.Frame(self, width = 500, height = 650, bd = 8, relief = "raise", background = "light blue")
        FrameOne.place(x=0, y=215) #First  frame
        self.FrameTwo = tk.Frame(self, width = 500, height = 365, bd = 8, relief ="raise", background = "light blue")
        self.FrameTwo.place(x=374, y=403) #Second frame
        self.FrameThree = tk.Frame(self, width = 500, height = 365, bd = 8, relief ="raise", background = "light blue")
        self.FrameThree.place(x=960, y=403) #Third frame
        FrameFour = tk.Frame(self, width = 180, height = 359, bd = 8, relief ="raise", background = "light blue")
        FrameFour.place(x=780, y=403) #Fourth frame

       
        home_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Home", command = lambda:manager.show_window("home_page"))
        home_button.pack(side=TOP) #Home button
        barbells_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Barbells", command = lambda:manager.show_window("barbells_page")) 
        barbells_button.pack(side=TOP) #Barbells button
        dumbbells_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Dumbbells", command = lambda:manager.show_window("dumbbells_page")) 
        dumbbells_button.pack(side=TOP)#Dumbells button
        machines_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Machines", command = lambda:manager.show_window("machines_page")) 
        machines_button.pack(side=TOP)#Machines button
        plates_button = tk.Button(FrameOne, width = 47, height =3, bd = 12, relief = "raise", background = "light blue", text = "Plates", command = lambda:manager.show_window("plates_page")) 
        plates_button.pack(side=TOP)#Plates button
        ordering_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Finish Ordering", command = lambda:manager.show_window("ordering_page")) 
        ordering_button.pack(side=TOP)#Ordering button
        exit_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Exit") 
        exit_button.pack(side=TOP)#Exit button
        #===============================================================Variables===================================
        self.ItemVar33 = IntVar()
        self.ItemVar34 = IntVar()
        self.ItemVar35 = IntVar()
        self.ItemVar36 = IntVar()
        self.ItemVar37 = IntVar()
        self.ItemVar38 = IntVar()
        self.ItemVar39 = IntVar()
        self.ItemVar40 = IntVar()
        self.ItemVar41 = IntVar()
        self.ItemVar42 = IntVar()
        self.ItemVar43 = IntVar()
        self.ItemVar44 = IntVar()
        self.ItemVar45 = IntVar()
        self.ItemVar46 = IntVar()
        self.ItemVar47 = IntVar()
        self.ItemVar48 = IntVar()
        self.variable_treadmill = StringVar()
        self.variable_chestpress = StringVar()
        self.variable_pecfly = StringVar()
        self.variable_seatedrow = StringVar()
        self.variable_latpulldown = StringVar()
        self.variable_ergometer = StringVar()
        self.variable_stairmaster = StringVar()
        self.variable_smithmachine = StringVar()
        self.variable_abcrunch = StringVar()
        self.variable_legextension = StringVar()
        self.variable_legpress = StringVar()
        self.variable_elliptical = StringVar()
        self.variable_standingcalfraise = StringVar()
        self.variable_shoulderpress = StringVar()
        self.variable_legcurls = StringVar()
        self.variable_deltoidraise = StringVar()
        
        

        machine_items = [self.variable_treadmill,self.variable_chestpress,self.variable_pecfly,self.variable_seatedrow,self.variable_latpulldown,self.variable_ergometer,self.variable_stairmaster,self.variable_smithmachine,self.variable_abcrunch,self.variable_legextension,self.variable_legpress,self.variable_elliptical,self.variable_standingcalfraise,self.variable_shoulderpress,self.variable_legcurls,self.variable_deltoidraise]
        for i in machine_items:
            i.set("0")
        #===================================================Widgets for machiness==========================================
        #===================================================First section for machines=============================================
        FirstLabel = tk.Label(self.FrameTwo, font=('arial',15, 'bold'),text = "Machines 1: ",bd=10, background = "light blue")
        FirstLabel.grid(row=0,column=0) 
        treadmill_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Treadmill ($900.00)\t\t" ,command = self.machines_checked_checkbuttons,variable = self.ItemVar33, onvalue = 1, background = "light blue", offvalue = 0, font=('arial',13, 'bold')).grid(row=1, sticky =W)
        chestpress_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Chest press ($1000.00)" ,command = self.machines_checked_checkbuttons, variable = self.ItemVar34, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=2, sticky =W)
        pecfly_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Pecfly ($800.00)" , command = self.machines_checked_checkbuttons,variable = self.ItemVar35, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=3, sticky =W)
        seatedrow_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Seated row ($750.00)", command = self.machines_checked_checkbuttons,variable = self.ItemVar36, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=4, sticky =W)
        latpulldown_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Lat pull down ($900.00)",command = self.machines_checked_checkbuttons,variable = self.ItemVar37, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=5, sticky =W)
        ergometer_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Ergometer ($800.00)",command = self.machines_checked_checkbuttons,variable = self.ItemVar38, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=6, sticky =W)
        stairmaster_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Stairmaster ($2000.00)", command = self.machines_checked_checkbuttons,variable = self.ItemVar39, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=7, sticky =W)
        smithmachine_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Smithmachine ($700.00)", command = self.machines_checked_checkbuttons,variable = self.ItemVar40, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=8, sticky =W)
        self.treadmill_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_treadmill, state = DISABLED)
        self.treadmill_entry.grid(row =1, column = 1)
        self.chestpress_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_chestpress, state = DISABLED)
        self.chestpress_entry.grid(row =2, column = 1)
        self.pecfly_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_pecfly, state = DISABLED)
        self.pecfly_entry.grid(row =3, column = 1)
        self.seatedrow_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_seatedrow, state = DISABLED)
        self.seatedrow_entry.grid(row =4, column = 1)
        self.latpulldown_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_latpulldown, state = DISABLED)
        self.latpulldown_entry.grid(row =5, column = 1)
        self.ergometer_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_ergometer ,state = DISABLED)
        self.ergometer_entry.grid(row =6, column = 1)
        self.stairmaster_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_stairmaster, state = DISABLED)
        self.stairmaster_entry.grid(row =7, column = 1)
        self.smithmachine_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left', textvariable = self.variable_smithmachine, state = DISABLED)
        self.smithmachine_entry.grid(row =8, column = 1)
        #=====================================================================Second section for dumbbell items================================
        SecondLabel = tk.Label(self.FrameThree, font=('arial',15, 'bold'),text = "Machines 2: ",bd=10, background = "light blue")
        SecondLabel.grid(row=0,column=0)
        row_checkbutton = tk.Checkbutton(self.FrameThree, text ="Ab crunch ($650.00)\t\t",command = self.machines_checked_checkbuttons, variable = self.ItemVar41, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=1, sticky =W)
        legextension_checkbutton = tk.Checkbutton(self.FrameThree, text ="Leg extension ($970.00)\t", command = self.machines_checked_checkbuttons,variable = self.ItemVar42, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=2, sticky =W)
        legpress_checkbutton = tk.Checkbutton(self.FrameThree, text ="Leg press ($1300.00)\t",command = self.machines_checked_checkbuttons, variable = self.ItemVar43, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=3, sticky =W)
        elliptical_checkbutton = tk.Checkbutton(self.FrameThree, text ="Elliptical ($1200.00)\t",command = self.machines_checked_checkbuttons, variable = self.ItemVar44, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=4, sticky =W)
        standingcalfraise_checkbutton = tk.Checkbutton(self.FrameThree, text ="Standing calf raise ($740.00)\t",command = self.machines_checked_checkbuttons, variable = self.ItemVar45, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=5, sticky =W)
        shoulderpress_checkbutton = tk.Checkbutton(self.FrameThree, text ="Shoulder press ($1100.00)\t", command = self.machines_checked_checkbuttons,variable = self.ItemVar46, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=6, sticky =W)
        legcurls_checkbutton = tk.Checkbutton(self.FrameThree, text ="Leg curls ($1600.00)\t", command = self.machines_checked_checkbuttons,variable = self.ItemVar47, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=7, sticky =W)
        deltoidraise_checkbutton = tk.Checkbutton(self.FrameThree, text ="Deltoid raise ($840.00)\t",command = self.machines_checked_checkbuttons,variable = self.ItemVar48, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=8, sticky =W)
        self.abcrunch_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_abcrunch, state = DISABLED)
        self.abcrunch_entry.grid(row =1, column = 1)
        self.legextension_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_legextension, state = DISABLED)
        self.legextension_entry.grid(row =2, column = 1)
        self.legpress_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable =self.variable_legpress, state = DISABLED)
        self.legpress_entry.grid(row =3, column = 1)
        self.elliptical_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable =self.variable_elliptical, state = DISABLED)
        self.elliptical_entry.grid(row =4, column = 1)
        self.standingcalfraise_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_standingcalfraise, state = DISABLED)
        self.standingcalfraise_entry.grid(row =5, column = 1)
        self.shoulderpress_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_shoulderpress, state = DISABLED)
        self.shoulderpress_entry.grid(row =6, column = 1)
        self.legcurls_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_legcurls, state = DISABLED)
        self.legcurls_entry.grid(row =7, column = 1)
        self.deltoidraise_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6, textvariable = self.variable_deltoidraise, state = DISABLED)
        self.deltoidraise_entry.grid(row =8, column = 1)   
    def machines_checked_checkbuttons(self):
        if (self.ItemVar33.get()==1):
            self.treadmill_entry.configure(state="normal")
        elif self.ItemVar33.get()==0:
            self.treadmill_entry.configure(state=DISABLED)
            self.variable_treadmill.set("0")
        if (self.ItemVar34.get()==1):
            self.chestpress_entry.configure(state="normal")
        elif self.ItemVar34.get()==0:
            self.chestpress_entry.configure(state=DISABLED)
            self.variable_chestpress.set("0")
        if (self.ItemVar35.get()==1):
            self.pecfly_entry.configure(state="normal")
        elif self.ItemVar35.get()==0:
            self.pecfly_entry.configure(state=DISABLED)
            self.variable_pecfly.set("0")
        if (self.ItemVar36.get()==1):
            self.seatedrow_entry.configure(state="normal")
        elif self.ItemVar36.get()==0:
            self.seatedrow_entry.configure(state=DISABLED)
            self.variable_seatedrow.set("0")
        if (self.ItemVar37.get()==1):
            self.latpulldown_entry.configure(state="normal")
        elif self.ItemVar37.get()==0:
            self.latpulldown_entry.configure(state=DISABLED)
            self.variable_latpulldown.set("0")
        if (self.ItemVar38.get()==1):
            self.ergometer_entry.configure(state="normal")
        elif self.ItemVar38.get()==0:
            self.ergometer_entry.configure(state=DISABLED)
            self.variable_ergometer.set("0")
        if (self.ItemVar39.get()==1):
            self.stairmaster_entry.configure(state="normal")
        elif self.ItemVar39.get()==0:
            self.stairmaster_entry.configure(state=DISABLED)
            self.variable_stairmaster.set("0")
        if (self.ItemVar40.get()==1):
            self.smithmachine_entry.configure(state="normal")
        elif self.ItemVar40.get()==0:
            self.smithmachine_entry.configure(state=DISABLED)
            self.variable_smithmachine.set("0")
        if (self.ItemVar41.get()==1):
            self.abcrunch_entry.configure(state="normal")
        elif self.ItemVar41.get()==0:
            self.abcrunch_entry.configure(state=DISABLED)
            self.variable_abcrunch.set("0")
        if (self.ItemVar42.get()==1):
            self.legextension_entry.configure(state="normal")
        elif self.ItemVar42.get()==0:
            self.legextension_entry.configure(state=DISABLED)
            self.variable_legextension.set("0")
        if (self.ItemVar43.get()==1):
            self.legpress_entry.configure(state="normal")
        elif self.ItemVar43.get()==0:
            self.legpress_entry.configure(state=DISABLED)
            self.variable_legpress.set("0")
        if (self.ItemVar44.get()==1):
            self.elliptical_entry.configure(state="normal")
        elif self.ItemVar44.get()==0:
            self.elliptical_entry.configure(state=DISABLED)
            self.variable_elliptical.set("0")
        if (self.ItemVar45.get()==1):
            self.standingcalfraise_entry.configure(state="normal")
        elif self.ItemVar45.get()==0:
            self.standingcalfraise_entry.configure(state=DISABLED)
            self.variable_standingcalfraise.set("0")
        if (self.ItemVar46.get()==1):
            self.shoulderpress_entry.configure(state="normal")
        elif self.ItemVar46.get()==0:
            self.shoulderpress_entry.configure(state=DISABLED)
            self.variable_shoulderpress.set("0")
        if (self.ItemVar47.get()==1):
            self.legcurls_entry.configure(state="normal")
        elif self.ItemVar47.get()==0:
            self.legcurls_entry.configure(state=DISABLED)
            self.variable_legcurls.set("0")
        if (self.ItemVar48.get()==1):
            self.deltoidraise_entry.configure(state="normal")
        elif self.ItemVar48.get()==0:
            self.deltoidraise_entry.configure(state=DISABLED)
            self.variable_deltoidraise.set("0")
#=====================================================Weight plates page=====================================
class plates_page(tk.Frame):  
    def __init__(self, parent, manager): #Initializes attributes
        tk.Frame.__init__(self, parent) #Initializes frame 
        self.manager = manager #Declares self.manager as manager (for window controlling)
        plates_top_border = Frame(self, width = 1366, height = 60, bd = 14, relief ="raise", background = "light blue")
        plates_top_border.place(x=0,y=0) #Plates top border
        self.TitleImage = PhotoImage(file="images/GymHomeBanner.png") #Banner for home page
        self.title_label = tk.Label(self, image=self.TitleImage, bd=3).place(x=0, y=56) 
        plates_bottom_border = Frame(self, width = 1366, height = 60, bd = 14, relief ="raise", background = "light blue")
        plates_bottom_border.place(x=0, y=156) #Plates bottom border 
       
        self.TitleImage2 = PhotoImage(file="images/platesbanner.png") #Plates banner
        self.title_label2 = tk.Label(self, image=self.TitleImage2, bd=3).place(x=365, y=215)
        FrameOne = tk.Frame(self, width = 500, height = 650, bd = 8, relief = "raise", background = "light blue")
        FrameOne.place(x=0, y=215) #First  frame
        self.FrameTwo = tk.Frame(self, width = 500, height = 365, bd = 8, relief ="raise", background = "light blue")
        self.FrameTwo.place(x=374, y=403) #Second frame
        self.FrameThree = tk.Frame(self, width = 500, height = 365, bd = 8, relief ="raise", background = "light blue")
        self.FrameThree.place(x=960, y=403) #Third frame
        FrameFour = tk.Frame(self, width = 180, height = 359, bd = 8, relief ="raise", background = "light blue")
        FrameFour.place(x=780, y=403) #Fourth frame

       
        home_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Home", command = lambda:manager.show_window("home_page"))
        home_button.pack(side=TOP) #Home button
        barbells_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Barbells", command = lambda:manager.show_window("barbells_page")) 
        barbells_button.pack(side=TOP) #Barbells button
        dumbbells_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Dumbbells", command = lambda:manager.show_window("dumbbells_page")) 
        dumbbells_button.pack(side=TOP)#Dumbells button
        machines_button = tk.Button(FrameOne, width = 47, height =3, bd = 12, relief = "raise", background = "light blue", text = "Machines", command = lambda:manager.show_window("machines_page")) 
        machines_button.pack(side=TOP)#Machines button
        plates_button = tk.Button(FrameOne, width = 47, height =3, bd = 12, relief = "raise", background = "light blue", text = "Plates", command = lambda:manager.show_window("plates_page")) 
        plates_button.pack(side=TOP)#Plates button
        ordering_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Finish Ordering", command = lambda:manager.show_window("ordering_page")) 
        ordering_button.pack(side=TOP)#Ordering button
        exit_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Exit") 
        exit_button.pack(side=TOP)#Exit button
        #===============================================================Variables===================================
        self.ItemVar49 = IntVar()
        self.ItemVar50 = IntVar()
        self.ItemVar51 = IntVar()
        self.ItemVar52 = IntVar()
        self.ItemVar53 = IntVar()
        self.ItemVar54 = IntVar()
        self.ItemVar55 = IntVar()
        self.ItemVar56 = IntVar()
        self.ItemVar57 = IntVar()
        self.ItemVar58 = IntVar()
        self.ItemVar59 = IntVar()
        self.ItemVar60 = IntVar()
        self.ItemVar61 = IntVar()
        self.ItemVar62 = IntVar()
        self.ItemVar63 = IntVar()
        self.ItemVar64 = IntVar()

    
        self.variable_fivekgs_plate = StringVar()
        self.variable_tenkgs_plate = StringVar()
        self.variable_fifteenkgs_plate = StringVar()
        self.variable_twentykgs_plate = StringVar()
        self.variable_twentyfivekgs_plate = StringVar()
        self.variable_thirtykgs_plate = StringVar()
        self.variable_thirtyfivekgs_plate = StringVar()
        self.variable_fourtykgs_plate = StringVar()
        self.variable_fourtyfivekgs_plate = StringVar()
        self.variable_fiftykgs_plate = StringVar()
        self.variable_fiftyfivekgs_plate = StringVar()
        self.variable_sixtykgs_plate = StringVar()
        self.variable_sixtyfivekgs_plate = StringVar()
        self.variable_seventykgs_plate = StringVar()
        self.variable_seventyfivekgs_plate =  StringVar()
        self.variable_eightykgs_plate = StringVar()

        plate_items = [self.variable_fivekgs_plate,self.variable_tenkgs_plate ,self.variable_fifteenkgs_plate ,self.variable_twentykgs_plate ,self.variable_twentyfivekgs_plate ,self.variable_thirtykgs_plate,self.variable_thirtyfivekgs_plate ,self.variable_fourtykgs_plate ,self.variable_fourtyfivekgs_plate ,self.variable_fiftykgs_plate ,self.variable_fiftyfivekgs_plate ,self.variable_sixtykgs_plate,self.variable_sixtyfivekgs_plate,self.variable_seventykgs_plate,self.variable_seventyfivekgs_plate,self.variable_eightykgs_plate ]
        for i in plate_items:
            i.set("0")
        #===================================================Widgets for plate items===========================================
        #===================================================First section for plate items=============================================
        FirstLabel = tk.Label(self.FrameTwo, font=('arial',15, 'bold'),text = "Plates 5-40 kgs",bd=10, background = "light blue")
        FirstLabel.grid(row=0,column=0)
        fivekgs_plate_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Plate 5kgs ($10.00)\t\t" ,variable = self.ItemVar49, command = self.plate_checked_checkbuttons, onvalue = 1, background = "light blue", offvalue = 0, font=('arial',13, 'bold')).grid(row=1, sticky =W)
        tenkgs_plate_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Plate 10kgs ($20.00)" , command = self.plate_checked_checkbuttons,variable = self.ItemVar50, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=2, sticky =W)
        fifteenkgs_plate_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Plate 15kgs ($30.00)" , command = self.plate_checked_checkbuttons,variable = self.ItemVar51, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=3, sticky =W)
        twentykgs_plate_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Plate 20kgs ($40.00)", command = self.plate_checked_checkbuttons,variable = self.ItemVar52, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=4, sticky =W)
        twentyfivekgs_plate_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Plate 25kgs ($50.00)",command = self.plate_checked_checkbuttons,variable = self.ItemVar53, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=5, sticky =W)
        thirtykgs_plate_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Plate 30kgs ($60.00)",command = self.plate_checked_checkbuttons,variable = self.ItemVar54, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=6, sticky =W)
        thirtyfivekgs_plate_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Plate 35kgs ($70.00)", command = self.plate_checked_checkbuttons,variable = self.ItemVar55, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=7, sticky =W)
        fourtykgs_plate_checkbutton = tk.Checkbutton(self.FrameTwo, text ="Plate 40kgs ($80.00)",command = self.plate_checked_checkbuttons, variable = self.ItemVar56, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=8, sticky =W)
        self.fivekgs_plate_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_fivekgs_plate, state = DISABLED)
        self.fivekgs_plate_entry.grid(row =1, column = 1)
        self.tenkgs_plate_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_tenkgs_plate, state = DISABLED)
        self.tenkgs_plate_entry.grid(row =2, column = 1)
        self.fifteenkgs_plate_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_fifteenkgs_plate, state = DISABLED)
        self.fifteenkgs_plate_entry.grid(row =3, column = 1)
        self.twentykgs_plate_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_twentykgs_plate, state = DISABLED)
        self.twentykgs_plate_entry.grid(row =4, column = 1)
        self.twentyfivekgs_plate_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_twentyfivekgs_plate, state = DISABLED)
        self.twentyfivekgs_plate_entry.grid(row =5, column = 1)
        self.thirtykgs_plate_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_thirtykgs_plate ,state = DISABLED)
        self.thirtykgs_plate_entry.grid(row =6, column = 1)
        self.thirtyfivekgs_plate_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left',textvariable = self.variable_thirtyfivekgs_plate, state = DISABLED)
        self.thirtyfivekgs_plate_entry.grid(row =7, column = 1)
        self.fourtykgs_plate_entry = tk.Entry(self.FrameTwo, font=('arial',13, 'bold'), bd = 8, width = 6, justify ='left', textvariable = self.variable_fourtykgs_plate, state = DISABLED)
        self.fourtykgs_plate_entry.grid(row =8, column = 1)
        #=====================================================================Second section for dumbbell items================================
        SecondLabel = tk.Label(self.FrameThree, font=('arial',15, 'bold'),text = "Plates 45-80 kgs",bd=10, background = "light blue")
        SecondLabel.grid(row=0,column=0)
        fourtyfivekgs_plate_checkbutton = tk.Checkbutton(self.FrameThree, text ="Plate 45kgs ($90.00)\t\t", command = self.plate_checked_checkbuttons,variable = self.ItemVar57, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=1, sticky =W)
        fiftykgs_plate_checkbutton = tk.Checkbutton(self.FrameThree, text ="Plate 50kgs ($100.00)\t", command = self.plate_checked_checkbuttons,variable = self.ItemVar58, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=2, sticky =W)
        fiftyfivekgs_plate_checkbutton = tk.Checkbutton(self.FrameThree, text ="Plate 55kgs ($110.00)\t", command = self.plate_checked_checkbuttons,variable = self.ItemVar59, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=3, sticky =W)
        sixtykgs_plate_checkbutton = tk.Checkbutton(self.FrameThree, text ="Plate 60kgs ($120.00)\t", command = self.plate_checked_checkbuttons,variable = self.ItemVar60, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=4, sticky =W)
        sixtyfivekgs_plate_checkbutton = tk.Checkbutton(self.FrameThree, text ="Plate 65kgs ($130.00)\t", command = self.plate_checked_checkbuttons,variable = self.ItemVar61, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=5, sticky =W)
        seventyfivekgs_plate_checkbutton = tk.Checkbutton(self.FrameThree, text ="Plate 70kgs ($140.00)\t", command = self.plate_checked_checkbuttons,variable = self.ItemVar62, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=6, sticky =W)
        seventyfivekgs_plate_checkbutton = tk.Checkbutton(self.FrameThree, text ="Plate 75kgs ($150.00)\t", command = self.plate_checked_checkbuttons,variable = self.ItemVar63, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=7, sticky =W)
        eightykgs_plate_checkbutton = tk.Checkbutton(self.FrameThree, text ="Plate 80kgs ($160.00)\t",command = self.plate_checked_checkbuttons,variable = self.ItemVar64, onvalue = 1, offvalue = 0, font=('arial',13, 'bold'), background = "light blue").grid(row=8, sticky =W)
        self.fourtyfivekgs_plate_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_fourtyfivekgs_plate, state = DISABLED)
        self.fourtyfivekgs_plate_entry.grid(row =1, column = 1)
        self.fiftykgs_plate_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_fiftykgs_plate, state = DISABLED)
        self.fiftykgs_plate_entry.grid(row =2, column = 1)
        self.fiftyfivekgs_plate_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable =self.variable_fiftyfivekgs_plate, state = DISABLED)
        self.fiftyfivekgs_plate_entry.grid(row =3, column = 1)
        self.sixtykgs_plate_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable =self.variable_sixtykgs_plate, state = DISABLED)
        self.sixtykgs_plate_entry.grid(row =4, column = 1)
        self.sixtyfivekgs_plate_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_sixtyfivekgs_plate, state = DISABLED)
        self.sixtyfivekgs_plate_entry.grid(row =5, column = 1)
        self.seventykgs_plate_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_seventykgs_plate, state = DISABLED)
        self.seventykgs_plate_entry.grid(row =6, column = 1)
        self.seventyfivekgs_plate_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6,textvariable = self.variable_seventyfivekgs_plate, state = DISABLED)
        self.seventyfivekgs_plate_entry.grid(row =7, column = 1)
        self.eightykgs_plate_entry = tk.Entry(self.FrameThree, font=('arial',13, 'bold'), bd = 8, width = 6, textvariable = self.variable_eightykgs_plate, state = DISABLED)
        self.eightykgs_plate_entry.grid(row =8, column = 1)   
    def plate_checked_checkbuttons(self):
        if (self.ItemVar49.get()==1):
            self.fivekgs_plate_entry.configure(state="normal")
        elif self.ItemVar49.get()==0:
            self.fivekgs_plate_entry.configure(state=DISABLED)
            self.variable_fivekgs_plate.set("0")
        if (self.ItemVar50.get()==1):
            self.tenkgs_plate_entry.configure(state="normal")
        elif self.ItemVar50.get()==0:
            self.tenkgs_plate_entry.configure(state=DISABLED)
            self.variable_tenkgs_plate.set("0")
        if (self.ItemVar51.get()==1):
            self.fifteenkgs_plate_entry.configure(state="normal")
        elif self.ItemVar51.get()==0:
            self.fifteenkgs_plate_entry.configure(state=DISABLED)
            self.variable_fifteenkgs_plate.set("0")
        if (self.ItemVar52.get()==1):
            self.twentykgs_plate_entry.configure(state="normal")
        elif self.ItemVar52.get()==0:
            self.twentykgs_plate_entry.configure(state=DISABLED)
            self.variable_twentykgs_plate.set("0")
        if (self.ItemVar53.get()==1):
            self.twentyfivekgs_plate_entry.configure(state="normal")
        elif self.ItemVar53.get()==0:
            self.twentyfivekgs_plate_entry.configure(state=DISABLED)
            self.variable_twentyfivekgs_plate.set("0")
        if (self.ItemVar54.get()==1):
            self.thirtykgs_plate_entry.configure(state="normal")
        elif self.ItemVar54.get()==0:
            self.thirtykgs_plate_entry.configure(state=DISABLED)
            self.variable_thirtykgs_plate.set("0")
        if (self.ItemVar55.get()==1):
            self.thirtyfivekgs_plate_entry.configure(state="normal")
        elif self.ItemVar55.get()==0:
            self.thirtyfivekgs_plate_entry.configure(state=DISABLED)
            self.variable_thirtyfivekgs_plate.set("0")
        if (self.ItemVar56.get()==1):
            self.fourtykgs_plate_entry.configure(state="normal")
        elif self.ItemVar56.get()==0:
            self.fourtykgs_plate_entry.configure(state=DISABLED)
            self.variable_fourtykgs_plate.set("0")
        if (self.ItemVar57.get()==1):
            self.fourtyfivekgs_plate_entry.configure(state="normal")
        elif self.ItemVar57.get()==0:
            self.fourtyfivekgs_plate_entry.configure(state=DISABLED)
            self.variable_fourtyfivekgs_plate.set("0")
        if (self.ItemVar58.get()==1):
            self.fiftykgs_plate_entry.configure(state="normal")
        elif self.ItemVar58.get()==0:
            self.fiftykgs_plate_entry.configure(state=DISABLED)
            self.variable_fiftykgs_plate.set("0")
        if (self.ItemVar59.get()==1):
            self.fiftyfivekgs_plate_entry.configure(state="normal")
        elif self.ItemVar59.get()==0:
            self.fiftyfivekgs_plate_entry.configure(state=DISABLED)
            self.variable_fiftyfivekgs_plate.set("0")
        if (self.ItemVar60.get()==1):
            self.sixtykgs_plate_entry.configure(state="normal")
        elif self.ItemVar60.get()==0:
            self.sixtykgs_plate_entry.configure(state=DISABLED)
            self.variable_sixtykgs_plate.set("0")
        if (self.ItemVar61.get()==1):
            self.sixtyfivekgs_plate_entry.configure(state="normal")
        elif self.ItemVar61.get()==0:
            self.sixtyfivekgs_plate_entry.configure(state=DISABLED)
            self.variable_sixtyfivekgs_plate.set("0")
        if (self.ItemVar62.get()==1):
            self.seventykgs_plate_entry.configure(state="normal")
        elif self.ItemVar62.get()==0:
            self.seventykgs_plate_entry.configure(state=DISABLED)
            self.variable_seventykgs_plate.set("0")
        if (self.ItemVar63.get()==1):
            self.seventyfivekgs_plate_entry.configure(state="normal")
        elif self.ItemVar63.get()==0:
            self.seventyfivekgs_plate_entry.configure(state=DISABLED)
            self.variable_seventyfivekgs_plate.set("0")
        if (self.ItemVar64.get()==1):
            self.eightykgs_plate_entry.configure(state="normal")
        elif self.ItemVar64.get()==0:
            self.eightykgs_plate_entry.configure(state=DISABLED)
            self.variable_eightykgs_plate.set("0")
class ordering_page(tk.Frame):  
    def __init__(self, parent, manager): #Initializes attributes
        tk.Frame.__init__(self, parent) #Initializes frame 
        self.manager = manager #Declares self.manager as manager (for window controlling)
        self.manager = manager #Declares self.manager as manager (for window controlling)
        plates_top_border = Frame(self, width = 1366, height = 60, bd = 14, relief ="raise", background = "light blue")
        plates_top_border.place(x=0,y=0) #Plates top border
        self.TitleImage = PhotoImage(file="images/GymHomeBanner.png") #Banner for home page
        self.title_label = tk.Label(self, image=self.TitleImage, bd=3).place(x=0, y=56) 
        plates_bottom_border = Frame(self, width = 1366, height = 60, bd = 14, relief ="raise", background = "light blue")
        plates_bottom_border.place(x=0, y=156) #Plates bottom border 
       
        self.TitleImage3 = PhotoImage(file="images/finishorderingbanner.png") #Plates banner
        self.title_label3 = tk.Label(self, image=self.TitleImage3, bd=3).place(x=365, y=215)
        FrameOne = tk.Frame(self, width = 500, height = 650, bd = 8, relief = "raise", background = "light blue")
        FrameOne.place(x=0, y=215) #First  frame
        self.FrameTwo = tk.Frame(self, width = 500, height = 350, bd = 8, relief ="raise", background = "light blue")
        self.FrameTwo.place(x=374, y=417) #Second frame
        self.FrameThree = tk.Frame(self, width = 500, height = 350, bd = 8, relief ="raise", background = "light blue")
        self.FrameThree.place(x=870, y=417) #Third frame

        Receipt_Ref = StringVar()
        self.DeliveryTip = StringVar()
        self.SubTotal = StringVar()
        self.TotalCost = StringVar()
    
        home_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Home", command = lambda:manager.show_window("home_page"))
        home_button.pack(side=TOP) #Home button
        barbells_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Barbells", command = lambda:manager.show_window("barbells_page")) 
        barbells_button.pack(side=TOP) #Barbells button
        dumbbells_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Dumbbells", command = lambda:manager.show_window("dumbbells_page")) 
        dumbbells_button.pack(side=TOP)#Dumbells button
        machines_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Machines", command = lambda:manager.show_window("machines_page")) 
        machines_button.pack(side=TOP)#Machines button
        plates_button = tk.Button(FrameOne, width = 47, height =3, bd = 12, relief = "raise", background = "light blue", text = "Plates", command = lambda:manager.show_window("plates_page")) 
        plates_button.pack(side=TOP)#Plates button
        ordering_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Finish Ordering", command = lambda:manager.show_window("ordering_page")) 
        ordering_button.pack(side=TOP)#Ordering button
        exit_button = tk.Button(FrameOne, width = 47, height = 3, bd = 12, relief = "raise", background = "light blue", text = "Exit") 
        exit_button.pack(side=TOP)#Ordering button
        
        ButtonTotal = tk.Button(self, padx = 16, pady = 1, bd =4,font=('arial', 10, 'bold'), width = 14,height = 4,  text = "Total", command = self.total_price, bg = "light blue")
        ButtonTotal.place(x=380, y=420)
        ButtonReset = tk.Button(self, padx = 16, pady = 1, bd =4,font=('arial', 10, 'bold'), width = 14,height = 4, text = "Reset", command =self.reset_data, bg = "light blue")
        ButtonReset.place(x=535, y=420)
        self.ReceiptButton = tk.Button(self, padx = 16, pady = 1, bd =4,font=('arial', 10, 'bold'), width = 14,height = 4, text = "Receipt", command =self.receipt, bg = "light blue", state = DISABLED)
        self.ReceiptButton.place(x=690, y=420)
        self.Receipt_Text = tk.Text(self, font=('arial',10, 'bold'), bd = 8, width = 66, height =20, state = DISABLED)
        self.Receipt_Text.place(x=870, y=420)

        LabelPaidTax=tk.Label(self, font=('arial', 12, 'bold'), text = "Delivery Tip:\t\t\t", bd = 8, background = "light blue")
        LabelPaidTax.place(x=380, y=690)
        EntryDeliveryTip = tk.Entry(self, font=('arial',10, 'bold'), bd = 8, justify='left', insertwidth =1, textvariable =self.DeliveryTip, state = DISABLED)
        EntryDeliveryTip.place(x=380, y=720)

        LabelSubTotal=tk.Label(self, font=('arial', 12, 'bold'), text = "Sub Total:", bd = 8, background = "light blue")
        LabelSubTotal.place(x=535, y=690)
        EntrySubTotal = tk.Entry(self, font=('arial',10, 'bold'), bd = 8, justify='left', insertwidth = 1, textvariable =self.SubTotal, state = DISABLED)
        EntrySubTotal.place(x=535, y=720)

        LabelTotalCost=tk.Label(self, font=('arial', 12, 'bold'), text = "Total Cost: (Inc Tax)", bd = 8, background = "light blue")
        LabelTotalCost.place(x=690, y=690)
        EntryTotalCost = tk.Entry(self, font=('arial',10, 'bold'), bd = 8, justify='left', insertwidth = 1, textvariable = self.TotalCost, state = DISABLED)
        EntryTotalCost.place(x=690, y=720)
    def total_price(self):
        self.ReceiptButton = tk.Button(self, padx = 16, pady = 1, bd =4,font=('arial', 10, 'bold'), width = 14,height = 4, text = "Receipt", command =self.receipt, bg = "light blue", state = NORMAL)
        self.ReceiptButton.place(x=690, y=420)
        Item1=float((app.windows["barbells_page"]).self.barbells["5"].get()) 
        Item2=float((app.windows["barbells_page"]).variable_tenkgs_barbell.get()) 
        Item3=float((app.windows["barbells_page"]).variable_fifteenkgs_barbell.get())
        Item4=float((app.windows["barbells_page"]).variable_twentykgs_barbell.get())
        Item5=float((app.windows["barbells_page"]).variable_twentyfivekgs_barbell.get())
        Item6=float((app.windows["barbells_page"]).variable_thirtykgs_barbell.get())
        Item7=float((app.windows["barbells_page"]).variable_thirtykgs_barbell.get())
        Item8=float((app.windows["barbells_page"]).variable_fourtykgs_barbell.get())
        Item9=float((app.windows["barbells_page"]).variable_fourtyfivekgs_barbell.get())
        Item10=float((app.windows["barbells_page"]).variable_fiftykgs_barbell.get())
        Item11=float((app.windows["barbells_page"]).variable_fiftyfivekgs_barbell.get())
        Item12=float((app.windows["barbells_page"]).variable_sixtykgs_barbell.get())
        Item13=float((app.windows["barbells_page"]).variable_sixtyfivekgs_barbell.get())
        Item14=float((app.windows["barbells_page"]).variable_seventykgs_barbell.get())
        Item15=float((app.windows["barbells_page"]).variable_seventyfivekgs_barbell.get())
        Item16=float((app.windows["barbells_page"]).variable_eightykgs_barbell.get())

        Item17=float((app.windows["dumbbells_page"]).variable_fivekgs_dumbbell.get())
        Item18=float((app.windows["dumbbells_page"]).variable_tenkgs_dumbbell.get())
        Item19=float((app.windows["dumbbells_page"]).variable_fifteenkgs_dumbbell.get())
        Item20=float((app.windows["dumbbells_page"]).variable_twentykgs_dumbbell.get())
        Item21=float((app.windows["dumbbells_page"]).variable_twentyfivekgs_dumbbell.get())
        Item22=float((app.windows["dumbbells_page"]).variable_thirtykgs_dumbbell.get())
        Item23=float((app.windows["dumbbells_page"]).variable_thirtyfivekgs_dumbbell.get())
        Item24=float((app.windows["dumbbells_page"]).variable_fourtykgs_dumbbell.get())
        Item25=float((app.windows["dumbbells_page"]).variable_fourtyfivekgs_dumbbell.get())
        Item26=float((app.windows["dumbbells_page"]).variable_fiftykgs_dumbbell.get())
        Item27=float((app.windows["dumbbells_page"]).variable_fiftyfivekgs_dumbbell.get())
        Item28=float((app.windows["dumbbells_page"]).variable_sixtykgs_dumbbell.get())
        Item29=float((app.windows["dumbbells_page"]).variable_sixtyfivekgs_dumbbell.get())
        Item30=float((app.windows["dumbbells_page"]).variable_seventykgs_dumbbell.get())
        Item31=float((app.windows["dumbbells_page"]).variable_seventyfivekgs_dumbbell.get())
        Item32=float((app.windows["dumbbells_page"]).variable_eightykgs_dumbbell.get())

        Item33=float((app.windows["machines_page"]).variable_treadmill.get())
        Item34=float((app.windows["machines_page"]).variable_chestpress.get())
        Item35=float((app.windows["machines_page"]).variable_pecfly.get())
        Item36=float((app.windows["machines_page"]).variable_seatedrow.get())
        Item37=float((app.windows["machines_page"]).variable_latpulldown.get())
        Item38=float((app.windows["machines_page"]).variable_ergometer.get())
        Item39=float((app.windows["machines_page"]).variable_stairmaster.get())
        Item40=float((app.windows["machines_page"]).variable_smithmachine.get())
        Item41=float((app.windows["machines_page"]).variable_abcrunch.get())
        Item42=float((app.windows["machines_page"]).variable_legextension.get())
        Item43=float((app.windows["machines_page"]).variable_legpress.get())
        Item44=float((app.windows["machines_page"]).variable_elliptical.get())
        Item45=float((app.windows["machines_page"]).variable_standingcalfraise.get())
        Item46=float((app.windows["machines_page"]).variable_shoulderpress.get())
        Item47=float((app.windows["machines_page"]).variable_legcurls.get())
        Item48=float((app.windows["machines_page"]).variable_deltoidraise.get())

        Item49=float((app.windows["plates_page"]).variable_fivekgs_plate.get())
        Item50=float((app.windows["plates_page"]).variable_tenkgs_plate.get())
        Item51=float((app.windows["plates_page"]).variable_fifteenkgs_plate.get())
        Item52=float((app.windows["plates_page"]).variable_twentykgs_plate.get())
        Item53=float((app.windows["plates_page"]).variable_twentyfivekgs_plate.get())
        Item54=float((app.windows["plates_page"]).variable_thirtykgs_plate.get())
        Item55=float((app.windows["plates_page"]).variable_thirtyfivekgs_plate.get())
        Item56=float((app.windows["plates_page"]).variable_fourtykgs_plate.get())
        Item57=float((app.windows["plates_page"]).variable_fourtyfivekgs_plate.get())
        Item58=float((app.windows["plates_page"]).variable_fiftykgs_plate.get())
        Item59=float((app.windows["plates_page"]).variable_fiftyfivekgs_plate.get())
        Item60=float((app.windows["plates_page"]).variable_sixtykgs_plate.get())
        Item61=float((app.windows["plates_page"]).variable_sixtyfivekgs_plate.get())
        Item62=float((app.windows["plates_page"]).variable_seventykgs_plate.get())
        Item63=float((app.windows["plates_page"]).variable_seventyfivekgs_plate.get())
        Item64=float((app.windows["plates_page"]).variable_eightykgs_plate.get())


        self.price_of_barbells=(Item1 * 15) + (Item2 * 30) + (Item3 * 45) + (Item4 * 60) + (Item5 * 75) + (Item6 * 90) + (Item7 * 105) + (Item8 * 120)+ (Item9 * 135) + (Item10 * 150) + (Item11 * 165) + (Item12 * 180) + (Item13 * 195) + (Item14 * 210) + (Item15 * 225) + (Item16 * 240)
        self.price_of_dumbbells= (Item17 * 10) + (Item18 * 20) + (Item19 * 30) + (Item20 * 40) + (Item21 * 50) + (Item22 * 60) + (Item23 * 70) + (Item24 * 80)+ (Item25 * 90) + (Item26 * 100) + (Item27 * 110) + (Item28 * 120) + (Item29 * 130) + (Item30 * 140) + (Item31 * 150) + (Item32 * 160)
        self.price_of_machines=(Item33 * 900) + (Item34 * 1000) + (Item35 * 800) + (Item36 * 750) + (Item37 * 900) + (Item38 * 800) + (Item39 * 2000) + (Item40 * 700)+ (Item41 * 650) + (Item42 * 970) + (Item43 * 1300) + (Item44 * 1200) + (Item45 * 740) + (Item46 * 1100) + (Item47 * 1600) + (Item48 * 840)
        self.price_of_plates=(Item49 * 10) + (Item50 * 20) + (Item51 * 30) + (Item52 * 40) + (Item53 * 50) + (Item54 * 60) + (Item55 * 70) + (Item56 * 80)+ (Item57 * 90) + (Item58 * 100) + (Item59 * 110) + (Item60 * 120) + (Item61 * 130) + (Item62 * 140) + (Item63 * 150) + (Item64 * 160)

        SubTotalofITEMS = '$ ' +str ('%.2f'%(self.price_of_barbells + self.price_of_dumbbells + self.price_of_machines + self.price_of_plates + 5.50))
        self.SubTotal.set(SubTotalofITEMS)
        delivery_tip_float = '$ ' + str('%.2f'%(5.50))
        self.DeliveryTip.set(delivery_tip_float)

        tax_float = ((self.price_of_barbells + self.price_of_dumbbells + self.price_of_machines + self.price_of_plates + 5.50)*0.15)
        total_cost_float = '$ ' + str ('%.2f'%(self.price_of_barbells + self.price_of_dumbbells + self.price_of_machines + self.price_of_plates + 5.50 + tax_float))
        self.TotalCost.set(total_cost_float)
    
    def reset_data(self):
        self.DeliveryTip.set("")
        self.SubTotal.set("")
        self.TotalCost.set("")
        #=============================================Unchecking checkbuttons=====================================
        for widget in (app.windows["plates_page"]).FrameTwo.winfo_children() and (app.windows["barbells_page"]).FrameTwo.winfo_children():
            if widget.winfo_class() == "Checkbutton":
                widget.deselect()
        for widget in (app.windows["machines_page"]).FrameTwo.winfo_children() and (app.windows["dumbbells_page"]).FrameTwo.winfo_children():
            if widget.winfo_class() == "Checkbutton":
                widget.deselect()
        for widget in (app.windows["plates_page"]).FrameThree.winfo_children() and (app.windows["barbells_page"]).FrameThree.winfo_children():
            if widget.winfo_class() == "Checkbutton":
                widget.deselect()
        for widget in (app.windows["machines_page"]).FrameThree.winfo_children() and (app.windows["dumbbells_page"]).FrameThree.winfo_children():
            if widget.winfo_class() == "Checkbutton":
                widget.deselect()
        #============================================Setting entries to zero and disabling entries===========================
        for widget in (app.windows["barbells_page"]).FrameTwo.winfo_children():
            if widget.winfo_class() == "Entry":
                widget.delete(0, "end")
                widget.insert(0, "0")
                widget.config(state="disabled")
        for widget in (app.windows["dumbbells_page"]).FrameTwo.winfo_children():
            if widget.winfo_class() == "Entry":
                widget.delete(0, "end")
                widget.insert(0, "0")
                widget.config(state="disabled")
        for widget in (app.windows["machines_page"]).FrameTwo.winfo_children():
            if widget.winfo_class() == "Entry":
                widget.delete(0, "end")
                widget.insert(0, "0")
                widget.config(state="disabled")
        for widget in (app.windows["plates_page"]).FrameTwo.winfo_children():
            if widget.winfo_class() == "Entry":
                widget.delete(0, "end")
                widget.insert(0, "0")
                widget.config(state="disabled")
        for widget in (app.windows["barbells_page"]).FrameThree.winfo_children():
            if widget.winfo_class() == "Entry":
                widget.delete(0, "end")
                widget.insert(0, "0")
                widget.config(state="disabled")
        for widget in (app.windows["dumbbells_page"]).FrameThree.winfo_children():
            if widget.winfo_class() == "Entry":
                widget.delete(0, "end")
                widget.insert(0, "0")
                widget.config(state="disabled")
        for widget in (app.windows["machines_page"]).FrameThree.winfo_children():
            if widget.winfo_class() == "Entry":
                widget.delete(0, "end")
                widget.insert(0, "0")
                widget.config(state="disabled")
        for widget in (app.windows["plates_page"]).FrameThree.winfo_children():
            if widget.winfo_class() == "Entry":
                widget.delete(0, "end")
                widget.insert(0, "0")
                widget.config(state="disabled")
     
        
      #  for widget in (app.windows["plates_page"]).winfo_children():
         #   if widget.winfo_class() == "Entry":
       #         print('detected entry widget')
        #        print(f'widget type: {widget.winfo_class()}')
        #    else:
       #         print(f'widget type: {widget.winfo_class()}')

    def receipt(self):
        DateofOrder = StringVar()
        DateofOrder.set(time.strftime("%d/%m/%Y"))
        self.Receipt_Text = tk.Text(self, font=('arial',10, 'bold'), bd = 8, width = 66, height =20, state = NORMAL)
        self.Receipt_Text.place(x=870, y=420)
        self.Receipt_Text.insert(END, 'Delivery Tip:\t' + self.DeliveryTip.get() + '\nTotal Cost:\t ' + self.TotalCost.get() + "\n")


if __name__ == "__main__": #Prevents parts of code from being run when modules are imported. 
    app = Main()
    app.mainloop()